use crate::{expressions::Expression, types::Type, Token, IdentifierType};

#[derive(Debug)]
pub enum ParserError {
    StructNotFound(IdentifierType),
    AssignReturnNothing,
    EntryFunctionCannotHaveForType,
    ExpectedToken,
    VariableTooLong(String),
    ExpectedIdentifierToken(Token),
    UnexpectedToken(Token),
    InvalidToken(Token, Token),
    TypeNotFound,
    NoIfBeforeElse,
    StructNameAlreadyUsed(String),
    VariableNameAlreadyUsed(String),
    VariableIdAlreadyUsed(IdentifierType),
    FunctionSignatureAlreadyExist(String),
    UnexpectedVariable(String),
    UnexpectedMappedVariableId(IdentifierType),
    MappingNotFound,
    UnexpectedType(Type),
    InvalidStructField(String),
    InvalidStructureName(String),
    FunctionNotFound(String, usize),
    FunctionNoReturnType(String),
    NoScopeFound,
    NoReturnFound,
    ReturnAlreadyInElse,
    EmptyValue,
    InvalidArrayCall,
    NotImplemented,
    InvalidOperation,
    InvalidTernaryNoPreviousExpression,
    DeadCodeNotAllowed,
    InvalidForExpression(Expression),
    OperatorNotFound(Token),
    InvalidCondition(Expression, Type),
    InvalidOperationNotSameType(Type, Type),
    CastError(Type, Type),
    InvalidArrayCallIndexType(Type),
    InvalidTypeInArray(Type, Type),
    InvalidValueType(Type, Type),
    InvalidFunctionType(Type),
    EmptyArrayConstructor,
    ExpectedNumberType,
    InvalidNumberValueForType
}
